{% macro construct_function(property, source) %}
{{ property.reference.class_name }}.parse_obj({{ source }})
{% endmacro %}

{% from "property_templates/property_macros.py.jinja" import construct_template %}

{% macro construct(property, source, initial_value=None) %}
{{ construct_template(construct_function, property, source, initial_value=initial_value) }}
{% endmacro %}

{% macro check_type_for_construct(property, source) %}isinstance({{ source }}, dict){% endmacro %}

{% macro transform(property, source, destination, declare_type=True) %}
{% if property.required %}

  {# if isinstance({{ source }}, {{property.reference.class_name}}): #}
if isinstance({{ source }}, BaseModel): 
{% if property.nullable %}
    {{ destination }} = {{ source }}.dict(exclude_unset=True) if {{ source }} else None
{% else %}
    {{ destination }} = {{ source }}.dict(exclude_unset=True)
{% endif %}
else:
    {{ destination }} = {{ source }}
{% else %}
    {{ destination }}{% if declare_type %}: Union[{% if property.nullable %}None, {% endif %}Dict[str, Any]]{% endif %} = None
if not isinstance({{ source }}, Unset):
    if isinstance({{ source }}, {{property.reference.class_name}}):
    {% if property.nullable %}
        {{ destination }} = {{ source }}.dict(exclude_unset=True) if {{ source }} else None
    {% else %}
        {{ destination }} = {{ source }}.dict(exclude_unset=True)
    {% endif %}

    else:
        {{ destination }} = {{ source }}
{% endif %}
{% endmacro %}
