from typing import Optional, Union

import httpx

from .base import BaseDriver,AuthToken, AuthLogin
from .client import AsyncClient, AsyncAuthenticatedClient
from ..models import User
from .exceptions import ApiError

{% for tag in tags: %}
from ..endpoints.async_api.{{tag | snakecase}} import {{tag | pascalcase}}Api
{% endfor %}

class AsyncDriver(BaseDriver):
    """ Asynchronous mattermost api driver implementation """
 
    _client : Optional[Union[AsyncClient,AsyncAuthenticatedClient]]
    """ The underlying Client which handles requests to the api """

    async def login(self):
        """
        Login with the provided authentication information. 
        """
        url = str(httpx.URL(self.options.url).join(self.options.basepath))
        self._client = self._client or AsyncClient(base_url=url, client_options=self.options.client_options)

        if isinstance(self.options.auth, AuthToken):
            self.active_token = self.options.auth.token
            self._client = AsyncAuthenticatedClient(base_url=url, auth_token=self.options.auth.token, client_options=self.options.client_options)
            user_api = UsersApi(self._client)
            self.user = await user_api.get_user("me")
        elif isinstance(self.options.auth, AuthLogin):
            user_api = UsersApi(self._client)
            response = await user_api.login(json_body=self.options.auth)
            self.user = User.parse_obj(response.json())
            session_token = response.headers['token']
            self.active_token = session_token
            self._client = AsyncAuthenticatedClient(base_url=url, auth_token = session_token, client_options=self.options.client_options)
        else:
            raise ApiError("No valid authentication credentials provided")

    {% for tag in tags: %}
    @property
    def {{tag | snakecase}}(self) -> {{tag | pascalcase}}Api:
        """Api endpoint for {{tag | pascalcase}}

        :type: :class:`~matterapi.endpoints.async_api.{{tag | pascalcase}}Api`
        """
        return {{tag | pascalcase}}Api(self._client)
    {% endfor %}

