from typing import Optional, Union

import httpx

from .base import BaseDriver,AuthToken, AuthLogin
from .client import SyncClient, SyncAuthenticatedClient
from ..models import User

from pydantic import PrivateAttr

{% for tag in tags: %}
from ..endpoints.sync_api.{{tag | snakecase}} import {{tag | pascalcase}}Api
{% endfor %}

class SyncDriver(BaseDriver):
    """ Synchronous mattermost api driver implementation """
 
    _client : Optional[Union[SyncClient,SyncAuthenticatedClient]] = PrivateAttr(None)
    """ The underlying client which handles requests to the api """

    def login(self):
        """
        Login with the provided authentication information. 
        """
        url = str(httpx.URL(self.options.url).join(self.options.basepath))
        self._client = self._client or SyncClient(base_url=url, client_options=self.options.client_options)
        
        if isinstance(self.options.auth, AuthToken):
            self.active_token = self.options.auth.token
            self._client = SyncAuthenticatedClient(base_url=url, auth_token=self.options.auth.token, client_options=self.options.client_options)
            user_api = UsersApi(self._client)
            self.user = user_api.get_user("me")
        elif isinstance(self.options.auth, AuthLogin):
            user_api = UsersApi(self._client)
            response = user_api.login(json_body=self.options.auth)
            self.user = User.parse_obj(response.json())
            session_token = response.headers['token']
            self.active_token = session_token
            self._client = SyncAuthenticatedClient(base_url=url, auth_token = session_token, client_options=self.options.client_options)
        else:
            raise ApiError("No valid authentication credentials provided")


    {% for tag in tags: %}
    @property
    def {{tag | snakecase}}(self) -> {{tag | pascalcase}}Api:
        """Api endpoint for {{tag | pascalcase}}

        :type: :class:`~matterapi.endpoints.sync_api.{{tag | pascalcase}}Api`
        """
        return {{tag | pascalcase}}Api(self._client)
    {% endfor %}

