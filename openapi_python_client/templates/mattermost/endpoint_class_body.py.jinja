{% set keyword_async = 'async ' if async_class == True else '' %}
{% set keyword_await = 'await ' if async_class == True else '' %}
""" Module to access the {{tag}} endpoints """
# pylint: disable=too-many-lines,too-many-locals,too-many-public-methods,too-few-public-methods

from typing import Any, Dict, List, Optional, Union, cast
from ..base import ApiBaseClass
from pydantic import BaseModel

{% for endpoint in collection.endpoints %}
{% for relative in endpoint.relative_imports %}
{{ relative }}
{% endfor %}
{% endfor %}

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params, json_body, return_type, arguments, client, kwargs, parse_response %}

class {{tag}}Api(ApiBaseClass):
    """ {{description | wordwrap(72) if description}} """
{% for endpoint in collection.endpoints %}
{% set return_string = return_type(endpoint) %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "None" %}


    {{keyword_async}}def {{endpoint.name | snakecase}}(self,
    {{ arguments(endpoint) | indent(8) }}
    ) -> {{ return_string | indent(8)}}:
        """{{ endpoint.summary| wordwrap(72) | indent(8) if endpoint.summary}}

        {{ endpoint.description | wordwrap(72) | indent(8) if endpoint.description}} 
        
        Api Reference:
            `{{ endpoint.name | pascalcase }} <https://api.mattermost.com/#operation/{{ endpoint.name | pascalcase }}>`_
        """

        {% if endpoint.path_parameters %}
        url = f"{{ endpoint.path }}"
        {% else %}
        url = "{{ endpoint.path }}"
        {% endif %}
        {% if endpoint.header_parameters %}
        headers: Dict[str, Any] = {}
        {{header_params(endpoint) | indent(8)}}
        {% endif %}
        {% if endpoint.cookie_parameters %}
        cookies: Dict[str, Any] = {}
        {{cookie_params(endpoint) | indent(8)}}
        {% endif %}
        {% if endpoint.query_parameters %}
        {{query_params(endpoint) | indent(8)}}
        {% endif %}
        {% if endpoint.json_body %}
        {{json_body(endpoint) | indent(8)}}
        {% endif %}

        {% if endpoint.multipart_body_reference %}
        multipart_body_data = {{ endpoint.multipart_body_reference.reference.class_name}}.parse_obj({{ endpoint.multipart_body_reference.python_name}})
        {% endif %}

        request_kwargs = {
            "url": url,
            {% if endpoint.header_parameters %}
            "headers": headers,
            {% endif %}
            {% if endpoint.cookie_parameters %}
            "cookies": cookies,
            {% endif %}
            {#- "timeout": self.client.get_timeout(), -#}
            {% if endpoint.form_body_reference %}
            "data": {{ endpoint.form_body_reference.python_name}},
            {% endif %}
            {% if endpoint.multipart_body_reference %}
            "data": multipart_body_data.get_data(),
            {% if endpoint.multipart_body_reference.file_property_names %}
            "files": multipart_body_data.get_files(),
            {% endif %}
            {% endif %}
            {% if endpoint.json_body %}
            "json": {{ "json_" + endpoint.json_body.python_name }},
            {% endif %}
            {% if endpoint.query_parameters %}
            "params": params,
            {% endif %}
        }
        # pylint: disable-next=protected-access
        {{keyword_async}}with self.client._get_httpx_client() as httpx_client:
            response = {{keyword_await}}httpx_client.{{ endpoint.method }}(
                **request_kwargs,
            )

        if self.skip_response_parsing:
            return response

        {% for response in endpoint.responses %}
        {% if response.source != "None" %}
        if response.status_code == {{ response.status_code }}:
        {% if response.prop.template %}
            {% from "property_templates/" + response.prop.template import construct %}
            {{ construct(response.prop, response.source) | indent(12) }}
            {% else %}
            {{ response.prop.python_name }} = {{ response.source }}
            {% endif %}
            return {{ response.prop.python_name }}
        {% endif %}
        {% endfor %}
        return response

{% endfor %}
