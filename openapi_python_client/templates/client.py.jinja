from .exceptions import (
        InvalidOrMissingParameters,
        NoAccessTokenProvided,
        NotEnoughPermissions,
        ResourceNotFound,
        MethodNotAllowed,
        ContentTooLarge,
        FeatureDisabled,
        TooManyRequests)
from typing import Dict, Optional, Any, Union
from pydantic import BaseModel, AnyHttpUrl, validator, PrivateAttr
from httpx._types import VerifyTypes
import httpx
import logging

log = logging.getLogger('mattermost_api.client')
log.setLevel(logging.INFO)


class BaseClient(BaseModel):
    """ A class for keeping track of data related to the API """

    base_url: AnyHttpUrl
    timeout: float = 5.0
    debug: bool = False
    verify_tls: Union[bool, Any] = True
    cookies: Optional[Dict[str, str]]
    headers: Optional[Dict[str, str]]
    userid: Optional[str]
    username: Optional[str]

    def get_headers(self) -> Dict[str, str]:
        """ Get headers to be used in all endpoints """
        return self.headers or {}

    def get_cookies(self) -> Dict[str, str]:
        return self.cookies or {}

    def get_timeout(self) -> float:
        return self.timeout

    def _check_response(self, response):
        try:
            response.raise_for_status()
        except httpx.HTTPStatusError as e:
            try:
                data = e.response.json()
                message = data.get('message', data)
            except ValueError:
                log.debug('Could not convert response to json')
                message = response.text
            log.error(message)
            # pylint: disable=no-else-raise
            if e.response.status_code == 400:
                raise InvalidOrMissingParameters(message) from e
            elif e.response.status_code == 401:
                raise NoAccessTokenProvided(message) from e
            elif e.response.status_code == 403:
                raise NotEnoughPermissions(message) from e
            elif e.response.status_code == 404:
                raise ResourceNotFound(message) from e
            elif e.response.status_code == 405:
                raise MethodNotAllowed(message) from e
            elif e.response.status_code == 413:
                raise ContentTooLarge(message) from e
            elif e.response.status_code == 429:
                raise TooManyRequests(message) from e
            elif e.response.status_code == 501:
                raise FeatureDisabled(message) from e
            else:
                raise


class AuthenticatedClient(BaseClient):
    """ A Client which has been authenticated for use on secured endpoints """
    auth_token: str

    def get_headers(self) -> Dict[str, str]:
        headers = self.headers or {}
        """ Get headers to be used in authenticated endpoints """
        return {"Authorization": f"Bearer {self.auth_token}", **headers}


class SyncClient(AuthenticatedClient):

    _client : Any = PrivateAttr()

    @property
    def client(self):
        if not getattr(self, '_client', None):
            self._client = httpx.Client()
        return self._client

    def get(self, **kwargs):
        response = self.client.get(**kwargs)
        self._check_response(response)
        return response

    def post(self, **kwargs):
        response = self.client.post(**kwargs)
        self._check_response(response)
        return response
 
    def put(self, **kwargs):
        response = self.client.put(**kwargs)
        self._check_response(response)
        return response

    def delete(self, **kwargs):
        response = self.client.delete(**kwargs)
        self._check_response(response)
        return response

    def patch(self, **kwargs):
        response = self.client.patch(**kwargs)
        self._check_response(response)
        return response

    def head(self, **kwargs):
        response = self.client.head(**kwargs)
        self._check_response(response)
        return response

    def options(self, **kwargs):
        response = self.client.options(**kwargs)
        self._check_response(response)
        return response


class AsyncClient(AuthenticatedClient):

    _client : Any = PrivateAttr()

    @property
    def client(self):
        if not getattr(self, '_client', None):
            self._client = httpx.AsyncClient()
        return self._client

    async def get(self, **kwargs):
        response = await self.client.get(**kwargs)
        self._check_response(response)
        return response

    async def post(self, **kwargs):
        response = await self.client.post(**kwargs)
        self._check_response(response)
        return response
 
    async def put(self, **kwargs):
        response = await self.client.put(**kwargs)
        self._check_response(response)
        return response

    async def delete(self, **kwargs):
        response = await self.client.delete(**kwargs)
        self._check_response(response)
        return response

    async def patch(self, **kwargs):
        response = await self.client.patch(**kwargs)
        self._check_response(response)
        return response

    async def head(self, **kwargs):
        response = await self.client.head(**kwargs)
        self._check_response(response)
        return response

    async def options(self, **kwargs):
        response = await self.client.options(**kwargs)
        self._check_response(response)
        return response


